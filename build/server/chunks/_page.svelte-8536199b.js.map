{"version":3,"file":"_page.svelte-8536199b.js","sources":["../../../.svelte-kit/adapter-node/entries/pages/docs/_page.svelte.js"],"sourcesContent":["import { c as create_ssr_component, b as each, e as escape, d as add_attribute } from \"../../../chunks/ssr.js\";\nimport Markdoc from \"@markdoc/markdoc\";\nconst md = '# Getting Started\\n## Clone the repository\\n```bash\\ngit clone https://github.com/rajnandan1/kener.git\\n```\\n\\n## Install Dependencies\\n```bash\\nnpm install\\n```\\n\\n## Start Kener\\n```bash\\nnpm run kener:dev\\n```\\nKener would be running at PORT 3000. Go to [http://localhost:3000](http://localhost:3000)\\n\\n![alt text](ss.png \"SS\")\\n## Folder structure\\n\\n```\\n├── src (svelte frontend files)\\n├── static (things put here can be referenced directly example static/logo.png -> /logo.png)\\n├── scripts (nodejs server files)\\n├── config\\n│   ├── site.yaml (to personalize your kener instance)\\n│   ├── monitors.yaml (to add monitors)\\n\\n```\\n\\n## Production Deployment\\nOnce you have added the `config/site.yaml` or `config/monitors.yaml` or changed anything in `src/`\\n```shell\\nnpm i\\nnpm run kener:build\\nnpm run kener\\n```\\n\\n\\n\\n## Custom Deployment\\nKener should be run using `prod.js` script. It needs two environment variables `PUBLIC_KENER_FOLDER=./build/client/kener` and `tz=UTC`\\n\\n```shell\\nexport PUBLIC_KENER_FOLDER=./build/client/kener\\nexport tz=UTC\\nnode prod.js\\n``` \\n- \\n---\\n# Modify Site\\n\\nThere is a folder called `/config`. Inside which there is a `site.yaml` file. You can modify this file to have your own branding.\\n\\n```yaml\\ntitle: \"Kener\"\\ntheme: \"dark\"\\nsiteURL: \"https://kener.netlify.app\"\\nhome: \"/\"\\nlogo: \"/logo.svg\"\\nfavicon: \"/kener.png\"\\ngithub:\\n  owner: \"rajnandan1\"\\n  repo: \"kener\"\\nmetaTags:\\n  description: \"Your description\"\\n  keywords: \"keyword1, keyword2\"\\nnav:\\n  - name: \"Documentation\"\\n    url: \"/docs\"\\nhero:\\n  title: Kener is a Open-Source Status Page System\\n  subtitle: Let your users know what\\'s going on.\\n    \\n```\\n\\n## title\\n\\nThis translates to\\n\\n```html\\n<title>Your Title</title>\\n```\\n\\n## theme\\nIt can be set by modifying the `<html>` class in `src/app.html` file\\n### Dark Theme\\n```html\\n<!DOCTYPE html>\\n<html lang=\"en\" class=\"dark dark:bg-background\">\\n```\\n### Light theme\\n```html\\n<!DOCTYPE html>\\n<html lang=\"en\" >\\n```\\nCan be `light` or `dark`. Defaults to `light`\\n\\n## siteURL\\nRoot URL where you are hosting kenner\\n```yaml\\n...\\nsiteURL: https://status.example.com\\n...\\n```\\n## home\\n\\nLocation when someone clicks on the your brand in the top nav bar\\n```yaml\\n...\\nhome: \"https://www.example.com\\n...\\n```\\n\\n## logo\\nURL of the logo that will be shown in the nav bar. You can also add your logo in the `static` folder\\n```yaml\\n...\\nlogo: \"https://www.example.com/logo.png\\n...\\n```\\n\\n## favicon\\nIt can be set by modifying the `<head>` tag in `src/app.html` file. \\nExample add a png called `logo.png` file in `static/` and then\\n\\n```html\\n...\\n<link rel=\"icon\"  href=\"/logo.png\" />\\n...\\n```\\n\\n\\n## github\\nFor incident kener uses github comments. Create an empty [github](https://github.com) public repo and add them to `site.yaml`\\n```yaml\\ngithub:\\n  owner: \"username\"\\n  repo: \"your-reponame\"\\n```\\n## metaTags\\nMeta tags are nothing but html `<meta>`. You can use them for SEO purposes\\n```yaml\\nmetaTags:\\n  description: \"Your description\"\\n  keywords: \"keyword1, keyword2\"\\n  og:image: \"https://example.com/og.png\"\\n```\\nwill become\\n\\n```html\\n<head>\\n\t<meta name=\"description\" content=\"Your description\">\\n\t<meta name=\"keywords\" content=\"keyword1, keyword2\">\\n\t<meta name=\"og:image\" content=\"https://example.com/og.png\">\\n</head>\\n```\\n\\n## hero\\nUse hero to add a banner to your kener page\\n```yaml\\nhero:\\n  title: Kener is a Open-Source Status Page System\\n  subtitle: Let your users know what\\'s going on.\\n```\\n\\n![alt text](ss2.png \"SS\")\\n\\n## nav\\nYou can add more links to your navbar.\\n```yaml\\nnav:\\n  - name: \"Home\"\\n    url: \"/home\"\\n```\\n![alt text](ss3.png \"SS\")\\n---\\n# Add Monitors\\n\\nInside `config/` folder there is a file called `monitors.yaml`. We will be adding our monitors here. Please note that your yaml must be valid. It is an array.\\n\\nSample\\n\\n```yaml\\n- name: Google Search\\n  description: Search the world\\'s information, including webpages, images, videos and more.\\n  tag: \"google-search\"\\n  image: \"/google.png\"\\n  cron: \"* * * * *\"\\n  method: POST\\n  url: https://www.google.com/webhp\\n  headers: \\n\tContent-Type: application/json\\n  body: \\'{\"order_amount\":1,\"order_currency\":\"INR\"}\\'\\n  eval: |\\n    (function(statusCode, responseTime, responseDataBase64){\\n      const resp = JSON.parse(atob(responseDataBase64));\\n      return {\\n        status: statusCode == 200 ? \\'UP\\':\\'DOWN\\',\\n        latency: responseTime,\\n      }\\n    })\\n```\\n\\n| Parameter Name        | Usage          | Description                                      |\\n| ----------- | ----------------- | --------------------------------------------------------------------------------------------------------- |\\n| name        | Required + Unique | This will be shown in the UI to your users. Keep it short and unique                                      |\\n| description | Optional          | This will be show below your name                                                                         |\\n| tag         | Required + Unique | This is used to tag incidents created in Github using comments                                            |\\n| image       | Optional          | To show a logo before the name                                                                            |\\n| cron        | Optional           | Use cron expression to specify the interval to run the monitors. Defaults to `* * * * *` i.e every minute |\\n| timeout        | Optional           | Timeout in milliseconds to cancel HTTP call. Default is 5000 |\\n| method      | Optional          | HTTP Method                                                                                               |\\n| url         | Optional          | HTTP URL                                                                                                  |\\n| headers     | Optional          | HTTP headers                                                                                              |\\n| body        | Optional          | HTTP Body as string                                                                                       |\\n| eval        | Optional          | Evaluator written in JS, to parse HTTP response and calculate uptime and latency                                                                                                          |\\n\\n## cron\\n\\nKener fills data every minute in UTC so if you give an expression that is not per minute, kener will backfill data using the latest status.\\nExample for `cron: \"*/15 * * * *\"` \\n- First run at \"2023-12-02T18:00:00.000Z\" - Status DOWN\\n- Second run at \"2023-12-02T18:15:00.000Z\" - Status UP\\n\\nKener will fill data from 18:01:00 to 18:14:00 as UP\\n\\n## eval\\n\\nThis is a anonymous JS function, by default it looks like this. \\n> **_NOTE:_**  The eval function should always return a json object. The json object can have only status(UP/DOWN/DEGRADED) and lantecy(number)\\n`{status:\"DEGRADED\", latency: 200}`. \\n```js\\n(function (statusCode, responseTime, responseDataBase64) {\\n\tlet statusCodeShort = Math.floor(statusCode/100);\\n\tlet status = \\'DOWN\\'\\n    if(statusCodeShort >=2 && statusCodeShort <= 3) {\\n        status = \\'UP\\',\\n    } \\n\treturn {\\n\t\tstatus: \\'DOWN\\',\\n\t\tlatency: responseTime,\\n\t}\\n})\\n```\\n- `statusCode` **REQUIRED** is a number. It is the HTTP status code\\n- `responseTime` **REQUIRED**is a number. It is the latency in milliseconds\\n- `responseDataBase64` **REQUIRED** is a string. It is the base64 encoded response data. To use it you will have to decode it \\n\\n```js\\nlet decodedResp = atob(responseDataBase64);\\n//let jsonResp = JSON.parse(decodedResp)\\n```\\n\\n---\\n# Monitor Examples\\nHere are some exhaustive examples for monitors\\n\\n## A Simple GET Monitor\\n\\n```yaml\\n- name: Google Search\\n  tag: \"google-search\"\\n  method: GET\\n  url: https://www.google.com/webhp\\n```\\n## A GET Monitor with image\\ngoogle.png is in the static folder\\n```yaml\\n- name: Google Search\\n  tag: \"google-search\"\\n  method: GET\\n  image: \"/google.png\"\\n  url: https://www.google.com/webhp\\n```\\n\\n## Get Monitor 15 Minute\\n\\n```yaml\\n- name: Google Search\\n  description: Search the world\\'s information, including webpages, images, videos and more.\\n  tag: \"google-search\"\\n  cron: \"*/15 * * * *\"\\n  method: GET\\n  url: https://www.google.com/webhp\\n```\\n\\n## Post Monitor With Body\\n```yaml\\n- name: Google Search\\n  description: Google Search\\n  tag: \"google-search-post\"\\n  method: POST\\n  url: https://www.google.com/webhp\\n  headers:\\n    Content-Type: application/json\\n  body: \\'{\"order_amount\":22222.1,\"order_currency\":\"INR\"}\\'\\n```\\n\\n## Secrets in Header\\n\\nYou can set ENV variables in your machine and use them in your monitors. Example below has `GH_TOKEN` as an environment variable. It uses process.env.GH_TOKEN. \\n`export GH_TOKEN=some.token.for.github`\\n> **_NOTE:_**  DO NOT forget the `$` sign in your monitor\\n```yaml\\n- name: Github Issues\\n  description: Github Issues Fetch\\n  tag: \"gh-search-issue\"\\n  method: GET\\n  url: https://api.github.com/repos/rajnandan1/kener/issues\\n  headers:\\n\tAuthorization: Bearer $GH_TOKEN\\n```\\n\\n## Secrets in Body\\n\\nAssuming `ORDER_ID` is present in env\\n```yaml\\n- name: Github Issues\\n  description: Github Issues Fetch\\n  tag: \"gh-search-issue\"\\n  method: POST\\n  url: https://api.github.com/repos/rajnandan1/kener/issues\\n  headers:\\n\tContent-Type: application/json\\n  body: \\'{\"order_amount\":22222.1,\"order_currency\":\"INR\", \"order_id\": \"$ORDER_ID\"}\\'\t\\n```\\n\\n## Eval Body\\n\\n```yaml\\n- name: Github Issues\\n  description: Github Issues Fetch\\n  tag: \"gh-search-issue\"\\n  method: GET\\n  url: https://api.github.com/repos/rajnandan1/kener/issues\\n  eval: |\\n    (function(statusCode, responseTime, responseDataBase64){\\n      const resp = JSON.parse(atob(responseDataBase64));\\n\t  let status = \\'DOWN\\'\\n\t  if(statusCode == 200) status = \\'UP\\';\\n\t  if(resp.length == 0) status = \\'DOWN\\';\\n\t  if(statusCode == 200 && responseTime > 2000) status = \\'DEGRADED\\';\\n      return {\\n        status: status,\\n        latency: responseTime,\\n      }\\n    })\\n```';\nconst Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {\n  const ast = Markdoc.parse(md);\n  const content = Markdoc.transform(ast);\n  let html = Markdoc.renderers.html(content);\n  let sideBar = [];\n  return `<section class=\"mx-auto container rounded-3xl bg-white mt-32\"><div class=\"grid grid-cols-5 gap-4\"><div class=\"col-span-5 md:col-span-1 hidden md:block border-r-2 border-gray-500\"><ul class=\"w-full sticky top-0 text-sm font-medium text-gray-900 bg-white mt-8 rounded-lg\">${each(sideBar, (item) => {\n    return `<li class=\"w-full px-4 py-2\"><a href=\"${\"#\" + escape(item.id, true)}\"${add_attribute(\"class\", item.type == \"h2\" ? \"pl-5\" : \"\", 0)}>${escape(item.text)}</a> </li>`;\n  })} <li class=\"w-full px-4 py-2 rounded-b-lg\" data-svelte-h=\"svelte-1fk2cyx\">Download</li></ul></div> <div class=\"col-span-5 md:col-span-4\"><div class=\"bg-white pt-6 p-0 md:p-10\"><article id=\"markdown\" class=\"prose prose-stone max-w-none prose-code:bg-gray-200 prose-code:px-[0.3rem] prose-code:py-[0.2rem] prose-code:font-mono prose-code:text-sm prose-code:rounded prose-code:font-mono\"><!-- HTML_TAG_START -->${html}<!-- HTML_TAG_END --></article></div></div></div></section>`;\n});\nexport {\n  Page as default\n};\n"],"names":[],"mappings":";;;AAEA,MAAM,EAAE,GAAG,u3TAAu3T,CAAC;AAC93T,MAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,UAAU,EAAE,KAAK,KAAK;AAC5E,EAAE,MAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;AAChC,EAAE,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACzC,EAAE,IAAI,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC7C,EAAE,IAAI,OAAO,GAAG,EAAE,CAAC;AACnB,EAAE,OAAO,CAAC,8QAA8Q,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,KAAK;AAClT,IAAI,OAAO,CAAC,sCAAsC,EAAE,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,MAAM,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC;AAC/K,GAAG,CAAC,CAAC,wZAAwZ,EAAE,IAAI,CAAC,2DAA2D,CAAC,CAAC;AACje,CAAC;;;;"}